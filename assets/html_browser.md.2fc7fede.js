import{o as e,c as a,d as t}from"./app.08b99513.js";const o='{"title":"浏览器架构","description":"","frontmatter":{},"headers":[{"level":2,"title":"浏览器架构","slug":"浏览器架构"},{"level":3,"title":"浏览器的多进程架构","slug":"浏览器的多进程架构"},{"level":3,"title":"多进程架构的好处","slug":"多进程架构的好处"},{"level":3,"title":"多进程架构优化","slug":"多进程架构优化"},{"level":2,"title":"导航过程都发生了什么","slug":"导航过程都发生了什么"},{"level":3,"title":"网页加载过程","slug":"网页加载过程"},{"level":3,"title":"网页渲染原理","slug":"网页渲染原理"},{"level":2,"title":"浏览器对事件的处理","slug":"浏览器对事件的处理"},{"level":3,"title":"渲染进程中合成器线程接收事件","slug":"渲染进程中合成器线程接收事件"},{"level":3,"title":"查找事件的目标对象（event target）","slug":"查找事件的目标对象（event-target）"},{"level":3,"title":"浏览器对事件的优化","slug":"浏览器对事件的优化"}],"relativePath":"html/browser.md","lastUpdated":1632995477195}',r={},s=t('<h2 id="浏览器架构"><a class="header-anchor" href="#浏览器架构" aria-hidden="true">#</a> 浏览器架构</h2><p>在讲浏览器架构之前，先理解两个概念，<code>进程</code>和<code>线程</code>。</p><p>进程（process）是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，线程（thread）是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p>简单的说呢，进程可以理解成正在执行的应用程序，而线程呢，可以理解成我们应用程序中的代码的执行器。而他们的关系可想而知，<strong>线程是跑在进程里面的</strong>，一个进程里面可能有一个或者多个线程，而一个线程，只能隶属于一个进程。</p><p>大家都知道，浏览器属于一个应用程序，而应用程序的一次执行，可以理解为计算机启动了一个<code>进程</code>，进程启动后，CPU会给该进程分配相应的内存空间，当我们的进程得到了内存之后，就可以使用<code>线程</code>进行资源调度，进而完成我们应用程序的功能。</p><p>而在应用程序中，为了满足功能的需要，启动的进程会创建另外的新的进程来处理其他任务，这些创建出来的新的进程拥有全新的独立的内存空间，不能与原来的进程内向内存，如果这些进程之间需要通信，可以通过IPC机制（Inter Process Communication）来进行。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704639.png" alt="进程1"></p><p>很多应用程序都会采取这种多进程的方式来工作，因为进程和进程之间是互相独立的它们<code>互不影响</code>，也就是说，当其中一个进程挂掉了之后，不会影响到其他进程的执行，只需要重启挂掉的进程就可以恢复运行。</p><h3 id="浏览器的多进程架构"><a class="header-anchor" href="#浏览器的多进程架构" aria-hidden="true">#</a> 浏览器的多进程架构</h3><p>假如我们去开发一个浏览器，它的架构可以是一个单进程多线程的应用程序，也可以是一个使用IPC通信的多进程应用程序。</p><p>不同的浏览器使用不同的架构，下面主要以Chrome为例，介绍浏览器的多进程架构。</p><p>在Chrome中，主要的进程有4个：</p><ul><li>浏览器进程 (Browser Process)：负责浏览器的TAB的前进、后退、地址栏、书签栏的工作和处理浏览器的一些不可见的底层操作，比如网络请求和文件访问。</li><li>渲染进程 (Renderer Process)：负责一个Tab内的显示相关的工作，也称渲染引擎。</li><li>插件进程 (Plugin Process)：负责控制网页使用到的插件</li><li>GPU进程 (GPU Process)：负责处理整个应用程序的GPU任务</li></ul><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301705344.png" alt="进程关系"></p><p>这4个进程之间的关系是什么呢？</p><p>首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入URL，这个时候<code>Browser Process</code>会向这个URL发送请求，获取这个URL的HTML内容，然后将HTML交给<code>Renderer Process</code>，<code>Renderer Process</code>解析HTML内容，解析遇到需要请求网络的资源又返回来交给<code>Browser Process</code>进行加载，同时通知<code>Browser Process</code>，需要<code>Plugin Process</code>加载插件资源，执行插件代码。解析完成后，<code>Renderer Process</code>计算得到图像帧，并将这些图像帧交给<code>GPU Process</code>，<code>GPU Process</code>将其转化为图像显示屏幕。</p><p><img src="https://segmentfault.com/img/remote/1460000022633992" alt="进程关系"></p><h3 id="多进程架构的好处"><a class="header-anchor" href="#多进程架构的好处" aria-hidden="true">#</a> 多进程架构的好处</h3><p>Chrome为什么要使用多进程架构呢？</p><p>第一，更高的容错性。当今WEB应用中，HTML，JavaScript和CSS日益复杂，这些跑在渲染引擎的代码，频繁的出现BUG，而有些BUG会直接导致渲染引擎崩溃，多进程架构使得每一个渲染引擎运行在各自的进程中，相互之间不受影响，也就是说，当其中一个页面崩溃挂掉之后，其他页面还可以正常的运行不收影响。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704601.png" alt="浏览器容错性"></p><p>第二，更高的安全性和沙盒性（sanboxing）。渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件，针对这一问题，浏览器对不同进程限制了不同的权限，并为其提供沙盒运行环境，使其更安全更可靠</p><p>第三，更高的响应速度。在单进程的架构中，各个任务相互竞争抢夺CPU资源，使得浏览器响应速度变慢，而多进程架构正好规避了这一缺点。</p><h3 id="多进程架构优化"><a class="header-anchor" href="#多进程架构优化" aria-hidden="true">#</a> 多进程架构优化</h3><p>之前的我们说到，<code>Renderer Process</code>的作用是负责一个Tab内的显示相关的工作，这就意味着，一个Tab，就会有一个Renderer Process，这些进程之间的内存无法进行共享，而不同进程的内存常常需要包含相同的内容。</p><h4 id="浏览器的进程模式"><a class="header-anchor" href="#浏览器的进程模式" aria-hidden="true">#</a> 浏览器的进程模式</h4><p>为了节省内存，Chrome提供了四种进程模式（Process Models），不同的进程模式会对 tab 进程做不同的处理。</p><ul><li><strong>Process-per-site-instance</strong> (default) - 同一个 <strong>site-instance</strong> 使用一个进程</li><li><strong>Process-per-site -</strong> 同一个 <strong>site</strong> 使用一个进程</li><li><strong>Process-per-tab -</strong> 每个 tab 使用一个进程</li><li><strong>Single process -</strong> 所有 tab 共用一个进程</li></ul><p>这里需要给出 site 和 site-instance 的定义</p><ul><li><strong>site</strong> 指的是相同的 registered domain name(如： <a href="http://google.com" target="_blank" rel="noopener noreferrer">google.com</a> ，<a href="http://bbc.co.uk" target="_blank" rel="noopener noreferrer">bbc.co.uk</a>)和scheme (如：<a href="https://link.segmentfault.com/?url=https%3A%2F%2F" target="_blank" rel="noopener noreferrer">https://)</a>)。比如a.baidu.com和b.baidu.com就可以理解为同一个 site（注意这里要和 <a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FSecurity%2FSame-origin_policy" target="_blank" rel="noopener noreferrer">Same-origin policy</a> 区分开来，同源策略还涉及到子域名和端口）。</li><li><strong>site-instance</strong> 指的是一组 <strong>connected pages from the same site</strong>，这里 <strong>connected</strong> 的定义是 <strong>can obtain references to each other in script code</strong> 怎么理解这段话呢。满足下面两中情况并且打开的新页面和旧页面属于上面定义的同一个 site，就属于同一个 <strong>site-instance</strong><ul><li>用户通过<code>&lt;a target=&quot;_blank&quot;&gt;</code>这种方式点击打开的新页面</li><li>JS代码打开的新页面（比如 <code>window.open</code>)</li></ul></li></ul><p>理解了概念之后，下面解释四个进程模式</p><p>首先是<code>Single process</code>，顾名思义，单进程模式，所有tab都会使用同一个进程。接下来是<code>Process-per-tab</code> ，也是顾名思义，每打开一个tab，会新建一个进程。而对于<code>Process-per-site</code>，当你打开 <a href="http://a.baidu.com" target="_blank" rel="noopener noreferrer">a.baidu.com</a> 页面，在打开 <a href="http://b.baidu.com" target="_blank" rel="noopener noreferrer">b.baidu.com</a> 的页面，这两个页面的tab使用的是共一个进程，因为这两个页面的site相同，而如此一来，如果其中一个tab崩溃了，而另一个tab也会崩溃。</p><p><code>Process-per-site-instance</code> 是最重要的，因为这个是 Chrome 默认使用的模式，也就是几乎所有的用户都在用的模式。当你打开一个 tab 访问 <a href="http://a.baidu.com" target="_blank" rel="noopener noreferrer">a.baidu.com</a> ，然后再打开一个 tab 访问 <a href="http://b.baidu.com" target="_blank" rel="noopener noreferrer">b.baidu.com</a>，这两个 tab 会使用<strong>两个进程</strong>。而如果你在 <a href="http://a.baidu.com" target="_blank" rel="noopener noreferrer">a.baidu.com</a> 中，通过JS代码打开了 <a href="http://b.baidu.com" target="_blank" rel="noopener noreferrer">b.baidu.com</a> 页面，这两个 tab 会使用<strong>同一个进程</strong>。</p><h4 id="默认模式选择"><a class="header-anchor" href="#默认模式选择" aria-hidden="true">#</a> 默认模式选择</h4><p>那么为什么浏览器使用<code>Process-per-site-instance</code>作为默认的进程模式呢？</p><p><code>Process-per-site-instance</code>兼容了性能与易用性，是一个比较中庸通用的模式。</p><ul><li>相较于 Process-per-tab，能够少开很多进程，就意味着更少的内存占用</li><li>相较于 Process-per-site，能够更好的隔离相同域名下毫无关联的 tab，更加安全</li></ul><h2 id="导航过程都发生了什么"><a class="header-anchor" href="#导航过程都发生了什么" aria-hidden="true">#</a> 导航过程都发生了什么</h2><p>前面我们讲了浏览器的多进程架构，讲了多进程架构的各种好处，和Chrome是怎么优化多进程架构的，下面从用户浏览网页这一简单的场景，来深入了解进程和线程是如何呈现我们的网站页面的。</p><h3 id="网页加载过程"><a class="header-anchor" href="#网页加载过程" aria-hidden="true">#</a> 网页加载过程</h3><p>之前我们我们提到，tab以外的大部分工作由浏览器进程<code>Browser Process</code>负责，针对工作的不同，Browser Process 划分出不同的工作线程：</p><ul><li>UI thread：控制浏览器上的按钮及输入框；</li><li>network thread：处理网络请求，从网上获取数据；</li><li>storage thread： 控制文件等的访问；</li></ul><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704620.png" alt="浏览器进程线程"></p><h4 id="第一步：处理输入"><a class="header-anchor" href="#第一步：处理输入" aria-hidden="true">#</a> 第一步：处理输入</h4><p>当我们在浏览器的地址栏输入内容按下回车时，<code>UI thread</code>会判断输入的内容是搜索关键词（search query）还是URL，如果是搜索关键词，跳转至默认搜索引擎对应都搜索URL，如果输入的内容是URL，则开始请求URL。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301705349.png" alt="处理输入"></p><h4 id="第二步：开始导航"><a class="header-anchor" href="#第二步：开始导航" aria-hidden="true">#</a> 第二步：开始导航</h4><p>回车按下后，<code>UI thread</code>将关键词搜索对应的URL或输入的URL交给网络线程<code>Network thread</code>，此时UI线程使Tab前的图标展示为加载中状态，然后网络进程进行一系列诸如DNS寻址，建立TLS连接等操作进行资源请求，如果收到服务器的301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704502.png" alt="开始导航"></p><h4 id="第三步：读取响应"><a class="header-anchor" href="#第三步：读取响应" aria-hidden="true">#</a> 第三步：读取响应</h4><p><code>network thread</code>接收到服务器的响应后，开始解析HTTP响应报文，然后根据响应头中的<code>Content-Type</code>字段来确定响应主体的媒体类型（MIME Type），如果媒体类型是一个HTML文件，则将响应数据交给渲染进程（renderer process）来进行下一步的工作，如果是 zip 文件或者其它文件，会把相关数据传输给下载管理器。</p><p>与此同时，浏览器会进行 <a href="https://link.segmentfault.com/?url=https%3A%2F%2Fsafebrowsing.google.com%2F" target="_blank" rel="noopener noreferrer">Safe Browsing</a> 安全检查，如果域名或者请求内容匹配到已知的恶意站点，network thread 会展示一个警告页。除此之外，网络线程还会做 <a href="https://link.segmentfault.com/?url=https%3A%2F%2Fwww.chromium.org%2FHome%2Fchromium-security%2Fcorb-for-developers" target="_blank" rel="noopener noreferrer">CORB</a>（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p><h4 id="第四步：查找渲染进程"><a class="header-anchor" href="#第四步：查找渲染进程" aria-hidden="true">#</a> 第四步：查找渲染进程</h4><p>各种检查完毕以后，network thread 确信浏览器可以导航到请求网页，network thread 会通知 UI thread 数据已经准备好，UI thread 会查找到一个 renderer process 进行网页的渲染。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704476.png" alt="查找渲染进程"></p><p>浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经预先查找和启动了一个渲染进程，如果中间步骤一切顺利，当 network thread 接收到数据时，渲染进程已经准备好了，但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</p><h4 id="第五步：提交导航"><a class="header-anchor" href="#第五步：提交导航" aria-hidden="true">#</a> 第五步：提交导航</h4><p>到了这一步，数据和渲染进程都准备好了，<code>Browser Process</code> 会向 <code>Renderer Process </code>发送IPC消息来确认导航，此时，浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送IPC消息给浏览器进程，告诉浏览器进程导航已经提交了，页面开始加载。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301706819.png" alt="提交导航"></p><p>这个时候导航栏会更新，安全指示符更新（地址前面的小锁），访问历史列表（history tab）更新，即可以通过前进后退来切换该页面。</p><h4 id="第六步：初始化加载完成"><a class="header-anchor" href="#第六步：初始化加载完成" aria-hidden="true">#</a> 第六步：初始化加载完成</h4><p>当导航提交完成后，渲染进程开始加载资源及渲染页面（详细内容下文介绍），当页面渲染完成后（页面及内部的iframe都触发了onload事件），会向浏览器进程发送IPC消息，告知浏览器进程，这个时候UI thread会停止展示tab中的加载中图标。</p><h3 id="网页渲染原理"><a class="header-anchor" href="#网页渲染原理" aria-hidden="true">#</a> 网页渲染原理</h3><p>导航过程完成之后，浏览器进程把数据交给了渲染进程，渲染进程负责tab内的所有事情，核心目的就是将HTML/CSS/JS代码，转化为用户可进行交互的web页面。那么渲染进程是如何工作的呢？</p><p>渲染进程中，包含线程分别是：</p><ul><li>一个主线程（main thread）</li><li>多个工作线程（work thread）</li><li>一个合成器线程（compositor thread）</li><li>多个光栅化线程（raster thread）</li></ul><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704931.png" alt="浏览器进程中线程"></p><p>不同的线程，有着不同的工作职责。</p><h4 id="构建dom"><a class="header-anchor" href="#构建dom" aria-hidden="true">#</a> 构建DOM</h4><p>当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，这个时候，主线程会解析数据转化为DOM（Document Object Model）对象。</p><p>DOM为WEB开发人员通过JavaScript与网页进行交互的数据结构及API。</p><h4 id="子资源加载"><a class="header-anchor" href="#子资源加载" aria-hidden="true">#</a> 子资源加载</h4><p>在构建DOM的过程中，会解析到图片、CSS、JavaScript脚本等资源，这些资源是需要从网络或者缓存中获取的，主线程在构建DOM过程中如果遇到了这些资源，逐一发起请求去获取，而为了提升效率，浏览器也会运行预加载扫描（preload scanner）程序，如果HTML中存在<code>img</code>、<code>link</code>等标签，预加载扫描程序会把这些请求传递给<code>Browser Process</code>的network thread进行资源下载。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301706880.png" alt="加载子资源"></p><h4 id="javascript的下载与执行"><a class="header-anchor" href="#javascript的下载与执行" aria-hidden="true">#</a> JavaScript的下载与执行</h4><p>构建DOM过程中，如果遇到<code>&lt;script&gt;</code>标签，渲染引擎会停止对HTML的解析，而去加载执行JS代码，原因在于JS代码可能会改变DOM的结构（比如执行<code>document.write()</code>等API）</p><p>不过开发者其实也有多种方式来告知浏览器应对如何应对某个资源，比如说如果在<code>&lt;script&gt;</code> 标签上添加了 <code>async</code> 或 <code>defer</code> 等属性，浏览器会异步的加载和执行JS代码，而不会阻塞渲染。</p><h4 id="样式计算-style-calculation"><a class="header-anchor" href="#样式计算-style-calculation" aria-hidden="true">#</a> 样式计算 - Style calculation</h4><p>DOM树只是我们页面的结构，我们要知道页面长什么样子，我们还需要知道DOM的每一个节点的样式。主线程在解析页面时，遇到<code>&lt;style&gt;</code>标签或者<code>&lt;link&gt;</code>标签的CSS资源，会加载CSS代码，根据CSS代码确定每个DOM节点的计算样式（computed style）。</p><p>计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，即使你的页面没有设置任何自定义的样式，浏览器也会提供其默认的样式。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301706553.png" alt="样式计算"></p><h4 id="布局-layout"><a class="header-anchor" href="#布局-layout" aria-hidden="true">#</a> 布局 - Layout</h4><p>DOM树和计算样式完成后，我们还需要知道每一个节点在页面上的位置，布局（Layout）其实就是找到所有元素的几何关系的过程。</p><p>主线程会遍历DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的布局树（Render Tree），遍历过程中，会跳过隐藏的元素（display: none），另外，伪元素虽然在DOM上不可见，但是在布局树上是可见的。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301706084.png" alt="layout"></p><h4 id="绘制-paint"><a class="header-anchor" href="#绘制-paint" aria-hidden="true">#</a> 绘制 - Paint</h4><p>布局 layout 之后，我们知道了不同元素的结构，样式，几何关系，我们要绘制出一个页面，我们要需要知道每个元素的绘制先后顺序，在绘制阶段，主线程会遍历布局树（layout tree），生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704856.png" alt="paint"></p><h4 id="合成-compositing"><a class="header-anchor" href="#合成-compositing" aria-hidden="true">#</a> 合成 - Compositing</h4><p>文档结构、元素的样式、元素的几何关系、绘画顺序，这些信息我们都有了，这个时候如果要绘制一个页面，我们需要做的是把这些信息转化为显示器中的像素，这个转化的过程，叫做<code>光栅化</code>（rasterizing）。</p><p>那我们要绘制一个页面，最简单的做法是只光栅化视口内（viewport）的网页内容，如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分，如下：</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704863.gif" alt="最简单的光栅化过程"></p><p>Chrome第一个版本就是采用这种简单的绘制方式，这一方式唯一的缺点就是每当页面滚动，光栅线程都需要对新移进视图的内容进行光栅化，这是一定的性能损耗，为了优化这种情况，Chrome采取一种更加复杂的叫做合成（compositing）的做法。</p><p>那么，什么是合成？合成是一种将<strong>页面分成若干层</strong>，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704101.gif" alt="合成的光栅化过程"></p><p>为了实现合成技术，我们需要对元素进行分层，确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree），对于添加了 <code>will-change</code> CSS 属性的元素，会被看做单独的一层，没有 <code>will-change</code> CSS属性的元素，浏览器会根据情况决定是否要把该元素放在单独的层。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704550.png" alt="layer tree"></p><p>你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。</p><p>一旦Layer Tree被创建，渲染顺序被确定，主线程会把这些信息通知给合成器线程，合成器线程开始对层次数的每一层进行光栅化。有的层的可以达到整个页面的大小，所以合成线程需要将它们切分为一块又一块的小图块（tiles），之后将这些小图块分别进行发送给一系列光栅线程（raster threads）进行光栅化，结束后光栅线程会将每个图块的光栅结果存在<code>GPU Process</code>的内存中。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704231.png" alt="光栅线程创建图块的位图并发送给GPU"></p><p>为了优化显示体验，合成线程可以给不同的光栅线程赋予不同的优先级，将那些在视口中的或者视口附近的层先被光栅化。</p><p>当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做<strong>绘画四边形</strong>（draw quads）的信息来构建一个<strong>合成帧</strong>（compositor frame）。</p><ul><li>绘画四边形：包含图块在<strong>内存的位置</strong>以及图层合成后图块在页面的位置之类的信息。</li><li>合成帧：代表页面一个帧的内容的绘制四边形<strong>集合</strong>。</li></ul><p>以上所有步骤完成后，合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（UI thread）提交以改变浏览器的UI。这些合成帧都会被发送给GPU从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给GPU来更新页面。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704854.png" alt="合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU"></p><p>合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。这就是为什么<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fwww.html5rocks.com%2Fen%2Ftutorials%2Fspeed%2Fhigh-performance-animations%2F" target="_blank" rel="noopener noreferrer">合成器相关的动画</a>最流畅，如果某个动画涉及到布局或者绘制的调整，就会涉及到主线程的重新计算，自然会慢很多。</p><h2 id="浏览器对事件的处理"><a class="header-anchor" href="#浏览器对事件的处理" aria-hidden="true">#</a> 浏览器对事件的处理</h2><p>当页面渲染完毕以后，TAB内已经显示出了可交互的WEB页面，用户可以进行移动鼠标、点击页面等操作了，而当这些事件发生时候，浏览器是如何处理这些事件的呢？</p><p>以点击事件（click event）为例，让鼠标点击页面时候，首先接受到事件信息的是<code>Browser Process</code>，但是Browser Process只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的<code>Renderer Process</code>进行的。Browser Process接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301707089.png" alt="点击事件从浏览器进程路由到渲染进程"></p><h3 id="渲染进程中合成器线程接收事件"><a class="header-anchor" href="#渲染进程中合成器线程接收事件" aria-hidden="true">#</a> 渲染进程中合成器线程接收事件</h3><p>前面我们说到，合成器线程可以独立于主线程之外通过已光栅化的层创建组合帧，例如页面滚动，如果没有对页面滚动绑定相关的事件，组合器线程可以独立于主线程创建组合帧，如果页面绑定了页面滚动事件，合成器线程会等待主线程进行事件处理后才会创建组合帧。那么，合成器线程是如何判断出这个事件是否需要路由给主线程处理的呢？</p><p>由于执行 JS 是主线程的工作，当页面合成时，合成器线程会标记页面中绑定有事件处理器的区域为<code>非快速滚动区域</code>(non-fast scrollable region)，如果事件发生在这些存在标注的区域，合成器线程会把事件信息发送给主线程，等待主线程进行事件处理，如果事件不是发生在这些区域，合成器线程则会直接合成新的帧而不用等到主线程的响应。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704832.png" alt="非快速滚动区域有用户事件发生"></p><p>而对于非快速滚动区域的标记，开发者需要注意全局事件的绑定，比如我们使用事件委托，将目标元素的事件交给根元素body进行处理，代码如下：</p><div class="language-javascript"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在开发者角度看，这一段代码没什么问题，但是从浏览器角度看，这一段代码给body元素绑定了事件监听器，也就意味着整个页面都被编辑为一个非快速滚动区域，这会使得即使你的页面的某些区域没有绑定任何事件，每次用户触发事件时，合成器线程也需要和主线程通信并等待反馈，流畅的合成器独立处理合成帧的模式就失效了。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704413.png" alt="当整个页面都是非快速滚动区域时页面的事件处理示意图"></p><p>其实这种情况也很好处理，只需要在事件监听时传递<code>passtive</code>参数为 true，<code>passtive</code>会告诉浏览器你既要绑定事件，又要让组合器线程直接跳过主线程的事件处理直接合成创建组合帧。</p><div class="language-javascript"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="查找事件的目标对象（event-target）"><a class="header-anchor" href="#查找事件的目标对象（event-target）" aria-hidden="true">#</a> 查找事件的目标对象（event target）</h3><p>当合成器线程接收到事件信息，判定到事件发生不在非快速滚动区域后，合成器线程会向主线程发送这个时间信息，主线程获取到事件信息的第一件事就是通过命中测试（hit test）去找到事件的目标对象。具体的命中测试流程是遍历在绘制阶段生成的绘画记录（paint records）来找到包含了事件发生坐标上的元素对象。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301707692.png" alt="当整个页面都是非快速滚动区域时页面的事件处理示意图"></p><h3 id="浏览器对事件的优化"><a class="header-anchor" href="#浏览器对事件的优化" aria-hidden="true">#</a> 浏览器对事件的优化</h3><p>一般我们屏幕的帧率是每秒60帧，也就是60fps，但是某些事件触发的频率超过了这个数值，比如wheel，mousewheel，mousemove，pointermove，touchmove，这些连续性的事件一般每秒会触发60~120次，假如每一次触发事件都将事件发送到主线程处理，由于屏幕的刷新速率相对来说较低，这样使得主线程会触发过量的命中测试以及JS代码，使得性能有了没必要是损耗。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704487.png" alt="事件淹没了屏幕刷新的时间轴，导致页面很卡顿"></p><p>出于优化的目的，浏览器会合并这些连续的事件，延迟到下一帧渲染是执行，也就是<code>requestAnimationFrame</code>之前。</p><p><img src="https://raw.githubusercontent.com/shadow198/picBed/main/BlogImg/202109301704483.png" alt="和之前相同的事件轴，可是这次事件被合并并延迟调度了"></p><p>而对于非连续性的事件，如keydown，keyup，mousedown，mouseup，touchstart，touchend等，会直接派发给主线程去执行。</p>',129);r.render=function(t,o,r,n,p,c){return e(),a("div",null,[s])};export default r;export{o as __pageData};
