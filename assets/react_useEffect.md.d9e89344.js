import{o as n,c as s,a}from"./app.45dfcc25.js";const t='{"title":"useEffect 规则","description":"","frontmatter":{},"headers":[{"level":2,"title":"useEffect 规则","slug":"useeffect-规则"},{"level":2,"title":"参数的规则","slug":"参数的规则"},{"level":2,"title":"不同值的参数","slug":"不同值的参数"},{"level":3,"title":"不传参数","slug":"不传参数"},{"level":3,"title":"空数组","slug":"空数组"},{"level":3,"title":"一个值的数组","slug":"一个值的数组"},{"level":3,"title":"多个值的数组","slug":"多个值的数组"},{"level":2,"title":"一个例子","slug":"一个例子"}],"relativePath":"react/useEffect.md","lastUpdated":1682403561763}',p={},o=a('<h2 id="useeffect-规则"><a class="header-anchor" href="#useeffect-规则" aria-hidden="true">#</a> useEffect 规则</h2><ul><li>在每次 render 之后执行</li><li>接受第二个参数来控制跳过执行，下次 render 后如果指定的值没有变化就不会执行</li><li>useEffect 是在 render 之后浏览器已经渲染结束才执行</li></ul><h2 id="参数的规则"><a class="header-anchor" href="#参数的规则" aria-hidden="true">#</a> 参数的规则</h2><ul><li>它是可选的</li><li>类型是一个数组</li><li>它的值应该是 props 或 state</li></ul><h2 id="不同值的参数"><a class="header-anchor" href="#不同值的参数" aria-hidden="true">#</a> 不同值的参数</h2><ul><li>不传参数</li><li>空数组</li><li>一个值的数组</li><li>多个值的数组</li></ul><h3 id="不传参数"><a class="header-anchor" href="#不传参数" aria-hidden="true">#</a> 不传参数</h3><div class="language-jsx"><pre><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;useEffect with no dependency&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>如上所示，默认的行为，会每次 render 后都执行</p><h3 id="空数组"><a class="header-anchor" href="#空数组" aria-hidden="true">#</a> 空数组</h3><div class="language-jsx"><pre><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;useEffect with empty dependency&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>传入第二个参数，每次 render 后比较数组的值没变化，不会在执行，等同于类组件中的 componentDidMount</p><h3 id="一个值的数组"><a class="header-anchor" href="#一个值的数组" aria-hidden="true">#</a> 一个值的数组</h3><div class="language-jsx"><pre><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;useEffect widh specify dependency&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>传入第二个参数，只有一个值，比较该值有变化就执行</p><h3 id="多个值的数组"><a class="header-anchor" href="#多个值的数组" aria-hidden="true">#</a> 多个值的数组</h3><div class="language-jsx"><pre><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;useEffect widh specify dependency&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><p>传入第二个参数，有2个值的数组，会比较每一个值，有一个不相等就执行</p><h2 id="一个例子"><a class="header-anchor" href="#一个例子" aria-hidden="true">#</a> 一个例子</h2><div class="language-jsx"><pre><code><span class="token keyword">function</span> <span class="token function">Detail</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span> name<span class="token punctuation">,</span> setName <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">function</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">setName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        EventCenter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">)</span>\n        \n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            EventCenter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> onLoad<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span><span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-jsx"><pre><code><span class="token comment">// 示例二</span>\n<span class="token keyword">function</span> <span class="token function">Goods</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span> name<span class="token punctuation">,</span> setName <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">fetchApi</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span><span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',21);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export{t as __pageData,p as default};
