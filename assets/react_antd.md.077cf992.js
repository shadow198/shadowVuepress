import{o as e,c as t,a as r}from"./app.e6be7eca.js";const a='{"title":"相关网站","description":"","frontmatter":{},"headers":[{"level":2,"title":"相关网站","slug":"相关网站"},{"level":2,"title":"学习笔记","slug":"学习笔记"},{"level":3,"title":"UIM Html模板","slug":"uim-html模板"},{"level":3,"title":"UMI路由","slug":"umi路由"},{"level":3,"title":"通过命令创建页面","slug":"通过命令创建页面"},{"level":3,"title":"useRequest","slug":"userequest"},{"level":3,"title":"react router","slug":"react-router"},{"level":3,"title":"React Hooks","slug":"react-hooks"},{"level":3,"title":"Umi Hooks","slug":"umi-hooks"},{"level":2,"title":"dva","slug":"dva"},{"level":2,"title":"umi-fabric","slug":"umi-fabric"},{"level":2,"title":"生命周期","slug":"生命周期"},{"level":2,"title":"React.memo","slug":"react-memo"},{"level":2,"title":"useState更新对象","slug":"usestate更新对象"}],"relativePath":"react/antd.md","lastUpdated":1634205936029}',o={},n=r('<h2 id="相关网站"><a class="header-anchor" href="#相关网站" aria-hidden="true">#</a> 相关网站</h2><ul><li><a href="https://ant.design/index-cn" target="_blank" rel="noopener noreferrer">Ant Design 官网</a></li><li><a href="https://umijs.org/zh-CN" target="_blank" rel="noopener noreferrer">UmiJS 官网</a></li><li><a href="https://pro.ant.design/zh-CN/" target="_blank" rel="noopener noreferrer">ANT DESIGN PRO 官网</a></li><li><a href="https://procomponents.ant.design/" target="_blank" rel="noopener noreferrer">procompoents 官网, Antd组件高级封装</a></li><li><a href="https://preview.pro.ant.design/dashboard/analysis/" target="_blank" rel="noopener noreferrer">预览站点,可动态拷贝配置</a></li><li></li></ul><h2 id="学习笔记"><a class="header-anchor" href="#学习笔记" aria-hidden="true">#</a> 学习笔记</h2><h3 id="uim-html模板"><a class="header-anchor" href="#uim-html模板" aria-hidden="true">#</a> UIM Html模板</h3><p><a href="https://umijs.org/zh-CN/docs/html-template" target="_blank" rel="noopener noreferrer">https://umijs.org/zh-CN/docs/html-template</a></p><h3 id="umi路由"><a class="header-anchor" href="#umi路由" aria-hidden="true">#</a> UMI路由</h3><p><a href="https://umijs.org/zh-CN/docs/routing" target="_blank" rel="noopener noreferrer">https://umijs.org/zh-CN/docs/routing</a></p><h3 id="通过命令创建页面"><a class="header-anchor" href="#通过命令创建页面" aria-hidden="true">#</a> 通过命令创建页面</h3><div class="language-"><pre><code>npx umi g page products --typescript\n</code></pre></div><h3 id="userequest"><a class="header-anchor" href="#userequest" aria-hidden="true">#</a> useRequest</h3><p><a href="https://hooks.umijs.org/zh-CN/hooks/async" target="_blank" rel="noopener noreferrer">https://hooks.umijs.org/zh-CN/hooks/async</a></p><ul><li>自动请求/手动请求</li><li>SWR(stale-while-revalidate)</li><li>缓存/预加载</li><li>屏幕聚焦重新请求</li><li>轮询</li><li>防抖</li><li>节流</li><li>并行请求</li><li>loading delay</li><li>分页</li><li>加载更多，数据恢复 + 滚动位置恢复</li><li>错误重试</li><li>请求超时管理</li><li>suspense</li></ul><div class="language-"><pre><code>import { useRequest } from &#39;@umijs/hooks&#39;;\nimport Mock from &#39;mockjs&#39;;\nimport React from &#39;react&#39;;\nfunction getUsername(): Promise&lt;string&gt; {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      resolve(Mock.mock(&#39;@name&#39;));\n    }, 1000);\n  });\n}\nexport default () =&gt; {\n  const { data, error, loading } = useRequest(getUsername)\n  if (error) {\n    return &lt;div&gt;failed to load&lt;/div&gt;\n  }\n  if (loading) {\n    return &lt;div&gt;loading...&lt;/div&gt;\n  }\n  return &lt;div&gt;Username: {data}&lt;/div&gt;\n}\n</code></pre></div><h3 id="react-router"><a class="header-anchor" href="#react-router" aria-hidden="true">#</a> react router</h3><p><a href="https://reactrouter.com/" target="_blank" rel="noopener noreferrer">https://reactrouter.com/</a></p><h3 id="react-hooks"><a class="header-anchor" href="#react-hooks" aria-hidden="true">#</a> React Hooks</h3><blockquote><p>Hook 是什么？ Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允许你在 React 函数组件中添加 state 的 Hook。稍后我们将学习其他 Hook。</p></blockquote><blockquote><p>什么时候我会用 Hook？ 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其转化为 class。现在你可以在现有的函数组件中使用 Hook。</p></blockquote><h4 id="使用"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><div class="language-"><pre><code>import React, { useState } from &#39;react&#39;;\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n}\n</code></pre></div><h3 id="umi-hooks"><a class="header-anchor" href="#umi-hooks" aria-hidden="true">#</a> Umi Hooks</h3><p><a href="https://hooks.umijs.org/zh-CN" target="_blank" rel="noopener noreferrer">https://hooks.umijs.org/zh-CN</a></p><h2 id="dva"><a class="header-anchor" href="#dva" aria-hidden="true">#</a> dva</h2><p><a href="https://dvajs.com/" target="_blank" rel="noopener noreferrer">https://dvajs.com/</a></p><h2 id="umi-fabric"><a class="header-anchor" href="#umi-fabric" aria-hidden="true">#</a> umi-fabric</h2><p><a href="https://github.com/umijs/fabric" target="_blank" rel="noopener noreferrer">https://github.com/umijs/fabric</a></p><h2 id="生命周期"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p><a href="https://imgtu.com/i/hnSCyd" target="_blank" rel="noopener noreferrer"><img src="https://z3.ax1x.com/2021/08/26/hnSCyd.png" alt="hnSCyd.png"></a></p><h2 id="react-memo"><a class="header-anchor" href="#react-memo" aria-hidden="true">#</a> React.memo</h2><blockquote><p>如果你的组件在相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p></blockquote><div class="language-"><pre><code>const MyComponent = React.memo(function MyComponent(props) {\n  /* 使用 props 渲染 */\n});\n</code></pre></div><h2 id="usestate更新对象"><a class="header-anchor" href="#usestate更新对象" aria-hidden="true">#</a> useState更新对象</h2><blockquote><p>更新对象时,需要在初始化定义对象的数据结构</p></blockquote><div class="language-"><pre><code>import React, { useState } from &#39;react&#39;;\n\nexport default () =&gt; {\n  const [state, setState] = useState({\n    count: 0,\n    count2: 0,\n    name: &#39;aaa&#39;,\n  });\n\n  const click = () =&gt; {\n    setState({\n      ...state,\n      count: state.count + 1,\n    });\n  };\n  const change = () =&gt; {\n    setState({\n      ...state,\n      name: &#39;bbb&#39;,\n    });\n  };\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        count:{state.count},name:{state.name}\n      &lt;/div&gt;\n      &lt;button onClick={click}&gt;+1&lt;/button&gt;\n      &lt;button onClick={change}&gt;name&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre></div>',34);o.render=function(r,a,o,l,i,s){return e(),t("div",null,[n])};export{a as __pageData,o as default};
