import{o as e,c as t,d as n}from"./app.08b99513.js";const a='{"title":"react","description":"","frontmatter":{},"headers":[{"level":2,"title":"what","slug":"what"},{"level":2,"title":"how","slug":"how"},{"level":3,"title":"install","slug":"install"},{"level":3,"title":"渲染 DOM 树","slug":"渲染-dom-树"},{"level":3,"title":"JSX 语法规则","slug":"jsx-语法规则"},{"level":3,"title":"创建一个无状态的函数组件","slug":"创建一个无状态的函数组件"},{"level":3,"title":"使用 class 语法创建组件","slug":"使用-class-语法创建组件"},{"level":3,"title":"用组合的方式创建一个 React 组件","slug":"用组合的方式创建一个-react-组件"},{"level":3,"title":"prop 传参","slug":"prop-传参"},{"level":3,"title":"使用 React 渲染嵌套组件","slug":"使用-react-渲染嵌套组件"},{"level":3,"title":"事件处理","slug":"事件处理"},{"level":3,"title":"向事件处理程序传递参数","slug":"向事件处理程序传递参数"},{"level":3,"title":"条件渲染","slug":"条件渲染"},{"level":3,"title":"列表渲染","slug":"列表渲染"},{"level":3,"title":"表单","slug":"表单"},{"level":3,"title":"状态提升","slug":"状态提升"},{"level":3,"title":"hooks","slug":"hooks"}],"relativePath":"react/main-concepts.md","lastUpdated":1632986862613}',l={},o=n('<h1 id="react"><a class="header-anchor" href="#react" aria-hidden="true">#</a> react</h1><h2 id="what"><a class="header-anchor" href="#what" aria-hidden="true">#</a> what</h2><blockquote><p>用于构建用户界面的 JavaScript 库</p></blockquote><ol><li>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据变动时 React 能高效更新并渲染合适的组件。</li><li>构建管理自身状态的封装组件，然后对其组合以构成复杂的 UI。</li><li>无论你现在使用什么技术栈，在无需重写现有代码的前提下，通过引入 React 来开发新功能。</li></ol><h2 id="how"><a class="header-anchor" href="#how" aria-hidden="true">#</a> how</h2><h3 id="install"><a class="header-anchor" href="#install" aria-hidden="true">#</a> install</h3><div class="language-"><pre><code>npx install create-react-app\n</code></pre></div><h3 id="渲染-dom-树"><a class="header-anchor" href="#渲染-dom-树" aria-hidden="true">#</a> 渲染 DOM 树</h3><div class="language-"><pre><code>ReactDOM.render(componentToRender, targetNode)\n</code></pre></div><h3 id="jsx-语法规则"><a class="header-anchor" href="#jsx-语法规则" aria-hidden="true">#</a> JSX 语法规则</h3><div class="language-"><pre><code>  1. 定义虚拟DOM时,不要写引号\n   2. 标签中混入JS表达式要用{}\n   3. 样式的类名指定不要用class, 要用className\n   4. 内联样式,要用style:{{key:value}}\n   5. 只有一个根标签\n   6. 标签必须要闭合\n   7. 标签首字母\n      1. 若小写字母开头,标签转为html同名元素\n      2. 若大写字母开头,渲染自定义组件\n</code></pre></div><h3 id="创建一个无状态的函数组件"><a class="header-anchor" href="#创建一个无状态的函数组件" aria-hidden="true">#</a> 创建一个无状态的函数组件</h3><div class="language-"><pre><code>const DemoComponent = function() {\n  return (\n    &lt;div className=&#39;customClass&#39; /&gt;\n  );\n};\n</code></pre></div><h3 id="使用-class-语法创建组件"><a class="header-anchor" href="#使用-class-语法创建组件" aria-hidden="true">#</a> 使用 class 语法创建组件</h3><div class="language-"><pre><code>class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &lt;h1&gt;Hi&lt;/h1&gt;\n    );\n  }\n}\n</code></pre></div><h3 id="用组合的方式创建一个-react-组件"><a class="header-anchor" href="#用组合的方式创建一个-react-组件" aria-hidden="true">#</a> 用组合的方式创建一个 React 组件</h3><div class="language-"><pre><code>function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Welcome name=&quot;Sara&quot; /&gt;\n      &lt;Welcome name=&quot;Cahal&quot; /&gt;\n      &lt;Welcome name=&quot;Edite&quot; /&gt;\n    &lt;/div&gt;\n  );\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;));\n\n</code></pre></div><h3 id="prop-传参"><a class="header-anchor" href="#prop-传参" aria-hidden="true">#</a> prop 传参</h3><div class="language-"><pre><code>1. const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;\n2. return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n</code></pre></div><h3 id="使用-react-渲染嵌套组件"><a class="header-anchor" href="#使用-react-渲染嵌套组件" aria-hidden="true">#</a> 使用 React 渲染嵌套组件</h3><h3 id="事件处理"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h3><div class="language-"><pre><code>&lt;button onClick={activateLasers}&gt;\n  Activate Lasers\n&lt;/button&gt;\n</code></pre></div><h3 id="向事件处理程序传递参数"><a class="header-anchor" href="#向事件处理程序传递参数" aria-hidden="true">#</a> 向事件处理程序传递参数</h3><div class="language-"><pre><code>&lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;\n&lt;button onClick={this.deleteRow.bind(this, id)}&gt;Delete Row&lt;/button&gt;\n</code></pre></div><h3 id="条件渲染"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h3><div class="language-"><pre><code>class LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n    if (isLoggedIn) {\n      button = &lt;LogoutButton onClick={this.handleLogoutClick} /&gt;;\n    } else {\n      button = &lt;LoginButton onClick={this.handleLoginClick} /&gt;;\n    }\n\n    return (\n      &lt;div&gt;\n        &lt;Greeting isLoggedIn={isLoggedIn} /&gt;\n        {button}\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;LoginControl /&gt;,\n  document.getElementById(&#39;root&#39;)\n);\n</code></pre></div><h3 id="列表渲染"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h3><div class="language-"><pre><code>const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =&gt;\n  &lt;li key={number.toString()}&gt;\n    {number}\n  &lt;/li&gt;\n);\n</code></pre></div><h3 id="表单"><a class="header-anchor" href="#表单" aria-hidden="true">#</a> 表单</h3><div class="language-"><pre><code>class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: &#39;&#39;};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert(&#39;提交的名字: &#39; + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.handleSubmit}&gt;\n        &lt;label&gt;\n          名字:\n          &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleChange} /&gt;\n        &lt;/label&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;\n      &lt;/form&gt;\n    );\n  }\n}\n</code></pre></div><h3 id="状态提升"><a class="header-anchor" href="#状态提升" aria-hidden="true">#</a> 状态提升</h3><blockquote><p>通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。让我们看看它是如何运作的。</p></blockquote><div class="language-"><pre><code>\n</code></pre></div><h3 id="hooks"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h3><div class="language-"><pre><code>import React, { useState } from &#39;react&#39;;\n\nfunction Example() {\n  // 声明一个新的叫做 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></div>',35);l.render=function(n,a,l,r,i,s){return e(),t("div",null,[o])};export default l;export{a as __pageData};
