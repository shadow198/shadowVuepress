import{o as t,c as a,a as e}from"./app.dbf2cc67.js";const o='{"title":"Event Loop","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么JavaScript是单线程？","slug":"为什么javascript是单线程？"},{"level":2,"title":"任务队列","slug":"任务队列"}],"relativePath":"js/event_loop.md","lastUpdated":1635690798846}',p={},r=e('<h1 id="event-loop"><a class="header-anchor" href="#event-loop" aria-hidden="true">#</a> Event Loop</h1><h2 id="为什么javascript是单线程？"><a class="header-anchor" href="#为什么javascript是单线程？" aria-hidden="true">#</a> 为什么JavaScript是单线程？</h2><blockquote><p>JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。</p></blockquote><h2 id="任务队列"><a class="header-anchor" href="#任务队列" aria-hidden="true">#</a> 任务队列</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p><p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p><p>（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</p><p>（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p><p>（4）主线程不断重复上面的第三步。</p>',13);p.render=function(e,o,p,u,s,c){return t(),a("div",null,[r])};export{o as __pageData,p as default};
