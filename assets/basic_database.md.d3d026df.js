import{o as e,c as a,a as d}from"./app.45dfcc25.js";const r='{"title":"数据库","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据库设计三大范式","slug":"数据库设计三大范式"},{"level":2,"title":"SQL","slug":"sql"},{"level":3,"title":"关系模型","slug":"关系模型"},{"level":3,"title":"查询数据","slug":"查询数据"},{"level":3,"title":"修改数据","slug":"修改数据"},{"level":2,"title":"MySQL","slug":"mysql"},{"level":2,"title":"MongoDB","slug":"mongodb"},{"level":2,"title":"SQLite","slug":"sqlite"}],"relativePath":"basic/database.md","lastUpdated":1682413247759}',s={},h=d('<h1 id="数据库"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h1><h2 id="数据库设计三大范式"><a class="header-anchor" href="#数据库设计三大范式" aria-hidden="true">#</a> 数据库设计三大范式</h2><ol><li>1NF是对属性的原子性，要求属性具有原子性，不可再分解；</li><li>2NF是对记录的唯一性，要求记录有唯一标识，即实体的唯一性，即不存在部分依赖；</li><li>3NF是对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</li></ol><h2 id="sql"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h2><h3 id="关系模型"><a class="header-anchor" href="#关系模型" aria-hidden="true">#</a> 关系模型</h3><h4 id="主键"><a class="header-anchor" href="#主键" aria-hidden="true">#</a> 主键</h4><blockquote><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。</p></blockquote><h5 id="主键类型"><a class="header-anchor" href="#主键类型" aria-hidden="true">#</a> 主键类型</h5><ol><li><p>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</p></li><li><p>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</p></li></ol><h4 id="外键"><a class="header-anchor" href="#外键" aria-hidden="true">#</a> 外键</h4><h4 id="索引"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h4><h3 id="查询数据"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3><h4 id="基本查询"><a class="header-anchor" href="#基本查询" aria-hidden="true">#</a> 基本查询</h4><div class="language-"><pre><code>SELECT * FROM students;\n</code></pre></div><h4 id="条件查询"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h4><div class="language-"><pre><code>SELECT * FROM students WHERE score &gt;= 80;\n</code></pre></div><h4 id="投影查询"><a class="header-anchor" href="#投影查询" aria-hidden="true">#</a> 投影查询</h4><div class="language-"><pre><code>SELECT id, score, name FROM students;\n</code></pre></div><h4 id="排序"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h4><div class="language-"><pre><code>SELECT id, name, gender, score FROM students ORDER BY score DESC;\n</code></pre></div><h4 id="分页查询"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h4><div class="language-"><pre><code>SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 0;\n</code></pre></div><h4 id="聚合查询"><a class="header-anchor" href="#聚合查询" aria-hidden="true">#</a> 聚合查询</h4><div class="language-"><pre><code>SELECT COUNT(*) num FROM students;\n</code></pre></div><h4 id="多表查询"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h4><div class="language-"><pre><code>SELECT\n    students.id sid,\n    students.name,\n    students.gender,\n    students.score,\n    classes.id cid,\n    classes.name cname\nFROM students, classes;\n</code></pre></div><h4 id="连接查询"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h4><blockquote><p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。</p></blockquote><div class="language-"><pre><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nINNER JOIN classes c\nON s.class_id = c.id;\n</code></pre></div><h3 id="修改数据"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h3><h4 id="insert"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> INSERT</h4><div class="language-"><pre><code>INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);\n</code></pre></div><h4 id="update"><a class="header-anchor" href="#update" aria-hidden="true">#</a> UPDATE</h4><blockquote><p>语法 UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</p></blockquote><div class="language-"><pre><code>UPDATE students SET name=&#39;大牛&#39;, score=66 WHERE id=1;\n</code></pre></div><h4 id="delete"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h4><blockquote><p>语法: DELETE FROM &lt;表名&gt; WHERE ...;</p></blockquote><div class="language-"><pre><code>DELETE FROM students WHERE id=1;\n</code></pre></div><h2 id="mysql"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h2><h2 id="mongodb"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h2><h2 id="sqlite"><a class="header-anchor" href="#sqlite" aria-hidden="true">#</a> SQLite</h2>',41);s.render=function(d,r,s,i,n,l){return e(),a("div",null,[h])};export{r as __pageData,s as default};
